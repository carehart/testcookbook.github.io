<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Cookbook</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://testcookbook.com/</link>
    <atom:link href="http://testcookbook.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Oct 2016 13:58:10 -0500</pubDate>
    <lastBuildDate>Tue, 04 Oct 2016 13:58:10 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Wait VS Sleep</title>
        <description>&lt;h1 id=&quot;wait-vs-sleep&quot;&gt;Wait VS Sleep&lt;/h1&gt;

&lt;p&gt;Chances are you work for a big company and you are testing many things but you
have some instances which are either flaky or you need to just pause for a bit.
With automation, especially on browser applications pausing is a good thing to
understand.  In general there are 2 kinds of pausing that work.  Wait and Sleep.&lt;/p&gt;

&lt;h2 id=&quot;sleep&quot;&gt;Sleep&lt;/h2&gt;

&lt;p&gt;The sleep statement has been around for quite a long time in the world of
software development.  As a tester sometimes it seems like the easiest way to
delay whatever is going on so that the rest of your test may pass.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#someElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#someOtherElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might have something that looks similar to the code above.  You try to click
on an element, sleep for 3 seconds and then try to click on another element. The
pros of this is that you have control over how long you wanna delay as long as
you are in front of the code that has that specific value.  But what are the
cons. One issue is you do not know if you might can delay 2 seconds instead of 3.
Why would you care?  Well if you always put a 3 second delay on tests and you
happen to have 100 tests you added 5 minutes or 300 seconds of delay time.  If
at some point they could be 1 second less you could save up to 100 seconds. The
other side to this coin is that maybe if you run your browser tests against a
remote selenium grid you might need a delay of longer than 3 seconds.&lt;/p&gt;

&lt;p&gt;It would sure be nice to have a way that would automatically continue if the
element was present.  In most automation frameworks there exists some form of
a waitForPresence.  If there isnâ€™t one they are generally not to complicated to
make your own.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#someElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#someOtherElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForPresence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#someOtherElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example instead of sleeping for 3 seconds, we wait for the element to
be present.  This can be really cool.  For example a pro for this type of delay
is that whether it takes 1 seconds or a few seconds the test can finish in its
most opportune time.  However there is a potential con to waits.  That is the
max time.  Most selenium tools have a max wait time from 10 to 30 seconds.  In
the case of failures at the wait statement each test can take up to that max
time.  Just think if you had 100 tests all with wait failures.  If max time is
30 seconds and 100 tests thats 3000 seconds or 50 minutes.  That is not fun.
At least you know if your tests are taking way to long all of a sudden you
either have a big issue with you code or you have quite a bit of refactoring to
do on your tests.&lt;/p&gt;

&lt;p&gt;Happy Testing.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Sep 2016 06:22:12 -0500</pubDate>
        <link>http://testcookbook.com/wait/sleep/2016/09/29/wait-vs-sleep.html</link>
        <guid isPermaLink="true">http://testcookbook.com/wait/sleep/2016/09/29/wait-vs-sleep.html</guid>
        
        
        <category>wait</category>
        
        <category>sleep</category>
        
      </item>
    
      <item>
        <title>Gherkin</title>
        <description>&lt;h1 id=&quot;what-is-gherkin&quot;&gt;What is Gherkin&lt;/h1&gt;

&lt;p&gt;Gherkin is a business formatted DSL (Domain Specific Language) that is used to 
describe how somethings behaves without actually implementing that functionality.&lt;/p&gt;

&lt;p&gt;The format for a Gherkin file is done by defining a Feature, then a Scenario.
For Example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot; data-lang=&quot;gherkin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Describe what this feature is about.

  &lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Describe what the scenario will be about.
    &lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; I do something
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; do something else
    &lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt; this happens
    &lt;span class=&quot;nf&quot;&gt;Then&lt;/span&gt; I get to do something new&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why would you ever want to write the Gherkin?  In a buisness format the Gherkin
file can be used in a variety of ways.  One of those ways is to have a common 
language between the developer and the business. A business minded person can
use this format to describe a behavior that they would like out of the product.
Or the reverse can be true a developer can describe the functionality that they
will be implementing where the business person can understand.&lt;/p&gt;

&lt;p&gt;Now that I have this Gherkin file what can I do with it besides communicate with
the business people.  Once you have a behavior in mind that you need, you can 
start the BDD process.  Write some step definitions to test your new application
based on the description on the DSL then write code to make it pass that behavior.&lt;/p&gt;

&lt;p&gt;Once you have written steps and built your application based on those tests, now
you will have a living documentation for your application.  Depending on the 
framework and language you use, you can create some interesting artifacts to go
along with the Gherkin.  For example by automating these tests you can record the 
video of functionality or capture screenshots to help describe what is going on.&lt;br /&gt;
These tools can be quite valuable to a new user of your application or maybe a new
team member.  As long as you keep up with your tests then you should have current 
and reliable documentation for you application.&lt;/p&gt;

&lt;h2 id=&quot;tools-where-you-can-use-gherkin&quot;&gt;Tools where you can use Gherkin&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cucumber&lt;/li&gt;
  &lt;li&gt;Lettuce&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 05 Sep 2016 06:22:12 -0500</pubDate>
        <link>http://testcookbook.com/gherkin/2016/09/05/gherkin.html</link>
        <guid isPermaLink="true">http://testcookbook.com/gherkin/2016/09/05/gherkin.html</guid>
        
        
        <category>gherkin</category>
        
      </item>
    
  </channel>
</rss>
